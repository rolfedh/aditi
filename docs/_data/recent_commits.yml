# Recent commits data for Jekyll
# Auto-generated by GitHub Actions
commits:
- sha: "e8ce86b0958f1136aca48616f3de43cd957dc61a"
  date: "July 27, 2025"
  author: "Rolfe Dlugy-Hegwer"
  subject: "Remove git integration from Aditi CLI design"
  body: "- Replace prescriptive git commands with high-level workflow guidance
- Update mockup to show improved directory discovery for nested structures
- Change terminology from "violations" to "issues"
- Add blog post documenting design decision

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>
"

- sha: "8f7752aaa2328cfaca5772adb33ac68f07696c14"
  date: "July 27, 2025"
  author: "GitHub Action"
  subject: "Update recent commits data [skip ci]"
  body: ""

- sha: "d2a3f859028ac88b6deaf47e96bbaf7c09925680"
  date: "July 27, 2025"
  author: "Rolfe Dlugy-Hegwer"
  subject: "Fix formatting inconsistencies in Phase 2 mockup documentation"
  body: ""

- sha: "35aa87e6b684f1a42cd724fb461093174c931c1d"
  date: "July 27, 2025"
  author: "GitHub Action"
  subject: "Update recent commits data [skip ci]"
  body: ""

- sha: "d29c4d2b7743376091a12e8511d568d3687c5ca2"
  date: "July 27, 2025"
  author: "Rolfe Dlugy-Hegwer"
  subject: "Add Phase 2 CLI interaction mockup demonstrating user workflow"
  body: "Created comprehensive mockup showing typical user interactions with Aditi CLI
from initial setup through successful migration completion.

## Key Scenarios Demonstrated

### 1. Initial Setup & Discovery
- First-time user experience with help and version commands
- Vale initialization with container setup
- Initial check revealing scope of migration work

### 2. Interactive Journey Command
- Repository configuration with subdirectory permissions
- Feature branch creation with git guidance
- Step-by-step workflow with user control

### 3. Rule Processing Examples
- **EntityReference** (Fully Deterministic): Automatic fixes with review
- **ContentType** (Partially Deterministic): Smart detection with confirmation
- **TaskSection** (Non-Deterministic): Manual intervention with TODO markers

### 4. Git Integration & PR Creation
- Non-invasive git command suggestions
- Commit message generation
- Pull request template with comprehensive details

### 5. Progress Tracking
- Visual feedback with progress bars and statistics
- Subsequent runs showing incremental improvements
- Clear indication of remaining work

## Design Principles

- **Progressive Disclosure**: Complexity revealed as needed
- **User Control**: Git operations suggested, never automated
- **Visual Feedback**: Rich terminal output with colors and emojis
- **Smart Defaults**: Intelligent suggestions based on file analysis
- **Clear Guidance**: Always shows next steps

The mockup demonstrates a realistic workflow where a technical writer
successfully migrates documentation, fixing 91% of issues automatically
while maintaining full control throughout the process.

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>
"
