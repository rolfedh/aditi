# Recent commits data for Jekyll
# Auto-generated by GitHub Actions
commits:
- sha: "0808b87f71cfdba1b8c18a218054420d82e926d8"
  date: "July 30, 2025"
  author: "Rolfe Dlugy-Hegwer"
  subject: "feat: Add intermediate recheck step and fix accurate fix counting in journey workflow"
  body: "Addresses GitHub issue #12 by adding a recheck confirmation step before continuing to the next rule.
Also fixes misleading fix count reporting when violations cannot be automatically fixed.

Changes:
- Add "Recheck for issues before continuing to next rule?" prompt after applying fixes
- Implement recheck_rule_violations() to re-run Vale and show remaining issues
- Fix apply_auto_fixes() to accurately count and report only fixes that were actually applied
- Show helpful message when no fixes can be applied (e.g., violations in code blocks)
- Remove Rich link markup for better terminal compatibility

The recheck feature helps users verify that automatic fixes resolved issues before proceeding.
The fix counting improvement prevents confusion when violations exist but cannot be fixed.

ü§ñ Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>
"

- sha: "b43df5171d9773a901f62e7fb0d5d76be3b25ce5"
  date: "July 31, 2025"
  author: "GitHub Action"
  subject: "Update recent commits data [skip ci]"
  body: ""

- sha: "593d0a3cc4ebae1801a0388b8e0fac9adaf037bb"
  date: "July 30, 2025"
  author: "Rolfe Dlugy-Hegwer"
  subject: "Summary: Adding and Debugging the Recheck Feature"
  body: "  What Was Implemented

  I added an intermediate "Recheck for issues" step in the Aditi
  journey workflow to address
  https://github.com/rolfedh/aditi/issues/12. The new flow is:

  1. Apply rule fixes/flags
  2. NEW: Ask "? Recheck for issues before continuing to next
  rule? (Y/n)"
  3. If Yes ‚Üí Re-run Vale to verify fixes worked
  4. Ask "? Continue with next rule? (Y/n)"

  Key Implementation Details

  1. Created recheck_rule_violations() function that:
    - Re-runs Vale with only the specific rule enabled
    - Shows remaining violation count
    - Lists files that still have issues in the same format as the
   original display
  2. Created recheck_and_continue_prompt() function that:
    - Prompts user to recheck (default: Yes)
    - Calls recheck function if user agrees
    - Then prompts to continue with next rule
  3. Updated process_single_rule() to:
    - Use recheck_and_continue_prompt() when fixes are applied
    - Keep using simple continue_prompt() when user skips

  Debugging Journey

  1. First Issue: Vale couldn't find files
    - Problem: Passing absolute paths to Vale running in container
    - Fix: Convert to relative paths using
  path.relative_to(Path.cwd())
  2. Second Issue: 'ValeContainer' object has no attribute
  'check_files'
    - Problem: Tried to use non-existent method
    - Fix: Use vale_container.run_vale_single_rule() instead
  3. Third Issue: 'Violation' object has no attribute 'rule'
    - Problem: Wrong attribute name
    - Fix: Changed v.rule to v.rule_name

  Final Implementation

  The recheck function now:
  - Uses the same Vale execution pattern as the original rule
  processing
  - Properly converts file paths for container execution
  - Parses Vale output using existing parser
  - Displays results in familiar format: "These files have this
  issue:"
  - Shows "‚úÖ No remaining issues" or "‚ö†Ô∏è X issue(s) still remain"

  This gives users confidence that automatic fixes worked before
  moving to the next rule.
"

- sha: "002c430d1d496cf87b5033263a5cadc729c4f244"
  date: "July 30, 2025"
  author: "Rolfe Dlugy-Hegwer"
  subject: "refactor: update directory selection to use numbered input for clarity"
  body: ""

- sha: "9220127343edc53c00948f7dc459be21cdfabc8a"
  date: "July 30, 2025"
  author: "GitHub Action"
  subject: "Update recent commits data [skip ci]"
  body: ""
