# Recent commits data for Jekyll
# Auto-generated by GitHub Actions
commits:
- sha: "edfc0cf21ddfab30d5527240658784cf89970c7d"
  date: "July 28, 2025"
  author: "Rolfe Dlugy-Hegwer"
  subject: "feat: Add comprehensive overview and completed tasks for Phase 3 implementation"
  body: ""

- sha: "cee5d6c3eec2d3cb802b4196fb87a9b8902c9541"
  date: "July 28, 2025"
  author: "Rolfe Dlugy-Hegwer"
  subject: "fix: Update failing tests for implemented Phase 3 commands"
  body: "- Update CLI integration tests to match new implemented commands vs placeholders
- Fix test mocks and imports (AditiConfig, FixType)
- Correct Vale container mocking to handle command arguments properly
- Use absolute paths in processor tests to fix file resolution
- Add exist_ok=True to git tests for robust directory handling
- All 75 tests now passing with 51% code coverage

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>
"

- sha: "046b9cc6b8a6bf1e60a64806706c90baf86c2dd1"
  date: "July 28, 2025"
  author: "GitHub Action"
  subject: "Update recent commits data [skip ci]"
  body: ""

- sha: "0c966cab88409aa603264e045e770d2106692478"
  date: "July 28, 2025"
  author: "Rolfe Dlugy-Hegwer"
  subject: "feat: Implement Phase 3 interactive journey and fix commands"
  body: "Implements complete interactive workflow for preparing AsciiDoc files for DITA migration:

- Add journey command with guided repository configuration and rule application
- Add fix command with interactive/non-interactive and dry-run modes
- Create directory scanner for finding .adoc files with .gitignore support
- Enhance configuration models with journey state tracking
- Add questionary dependency for interactive CLI prompts
- Update Phase 3 documentation with detailed implementation design
- Wire up both commands to main CLI with proper help text

The journey command provides progressive disclosure workflow:
1. Repository configuration with directory selection
2. Rule-by-rule processing (ContentType first as prerequisite)
3. Three action choices per rule: Auto-fix/Flag/Skip
4. Progress tracking and final report generation

The fix command supports targeted fixing with rule filtering,
confirmation prompts, and dry-run preview capabilities.

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>
"

- sha: "82841b639248341d55fcff45b43befb1cfeb7e51"
  date: "July 28, 2025"
  author: "Rolfe Dlugy-Hegwer"
  subject: "feat: Implement rule registry and violation parser"
  body: "- Added RuleRegistry class for managing and discovering rules.
- Implemented auto-discovery of rules from specified package.
- Created ValeParser class to parse Vale JSON output into structured Violation objects.
- Introduced Violation and Severity classes to represent violations and their severity levels.
- Enhanced ValeContainer to run Vale commands with specified arguments.
- Added integration tests for the check command to ensure proper functionality.
- Developed unit tests for the processor, rules, and vale_parser modules to validate logic and behavior.
"
