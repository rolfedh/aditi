# Recent commits data for Jekyll
# Auto-generated by GitHub Actions
commits:
- sha: "6f17fef4f58b8f5280bbcc58158f25b48fd0ba83"
  date: "July 29, 2025"
  author: "Rolfe Dlugy-Hegwer"
  subject: "fix: Improve error messages and edge case handling for production readiness"
  body: "- Enhanced path validation errors with actionable guidance in check and fix commands
- Added comprehensive file validation for empty, corrupted, and unreadable AsciiDoc files
- Improved error messages to show allowed paths and clear next steps
- Added file accessibility checks with detailed error reporting
- Created comprehensive test suite for signal handling verification
- Verified interruption handling (Ctrl+C) works correctly during operations
- All error messages now provide clear guidance instead of cryptic warnings

Addresses UX issues identified during end-to-end testing with production-ready improvements.

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>
"

- sha: "612772cffeba1486b191b4bb0021cdfb288c460b"
  date: "July 29, 2025"
  author: "GitHub Action"
  subject: "Update recent commits data [skip ci]"
  body: ""

- sha: "4ed6ab0229a0c78497181ffca1e4f22396a599a5"
  date: "July 29, 2025"
  author: "Rolfe Dlugy-Hegwer"
  subject: "perf: Comprehensive performance optimizations and edge case handling"
  body: "Implemented extensive performance improvements and robust error handling
across the entire Aditi codebase for production-ready reliability.

Performance Optimizations:
- Vale container image caching to eliminate redundant pulls (~50% faster startup)
- Resource limits (512MB memory, 2 CPU cores) with 5-minute timeouts
- Parallel file processing with ThreadPoolExecutor (up to 4 workers, ~3x faster)
- File content caching to avoid repeated reads
- Security hardening with read-only mounts and privilege restrictions

Edge Case Handling:
- Comprehensive file system permission checks and access validation
- Safe filename validation blocking dangerous characters and patterns
- Unicode encoding fallback strategies (UTF-8 â†’ latin-1)
- 10MB file size limits to prevent memory exhaustion
- Path validation ensuring files stay within project boundaries

Robustness Improvements:
- Graceful signal handling (SIGINT/SIGTERM) with cleanup functions
- Thread-safe interruption checking with partial result preservation
- Rule registry caching to avoid repeated auto-discovery
- Detailed error messages with non-fatal warning system
- Batch processing with intelligent limits to avoid command line issues

Real-World Readiness:
- Handles large documentation repositories efficiently
- Graceful recovery from individual file failures
- Production-ready error handling for CI/CD integration
- User-friendly interruption with preserved partial work

Created comprehensive documentation in PERFORMANCE_OPTIMIZATIONS.md
and updated todo priorities for next development phase.

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>
"

- sha: "fe3b1afec97c356f59aece4168f5afcd8cdb24fe"
  date: "July 29, 2025"
  author: "GitHub Action"
  subject: "Update recent commits data [skip ci]"
  body: ""

- sha: "004ac193cf0e7a2513d37612353d6e54ddc46a3c"
  date: "July 29, 2025"
  author: "Rolfe Dlugy-Hegwer"
  subject: "feat: Enhance CLAUDE.md automation to recognize Phase 2 rule engine completion"
  body: "Updated the automation system to properly detect and document the major
Phase 2 achievement: implementation of 27 AsciiDocDITA rules using the
non-deterministic pattern.

Enhancements:
- Added Phase 2 detection logic in claude_md_updater.py
- Automatically counts implemented rules (27 detected)
- Recognizes core infrastructure: vale_parser.py, processor.py, scanner.py
- Documents non-deterministic pattern achievement
- Updates template to reflect Phase 2 completion
- Moves to Phase 3 as next focus

Phase 2 Achievements Now Documented:
âœ… Complete AsciiDocDITA rule engine with 27 implemented rules
âœ… Non-deterministic pattern implementation for consistent rule structure
âœ… Rule registry system for dynamic rule discovery and execution
âœ… ContentType rule (prerequisite for content-dependent rules)
âœ… EntityReference rule with deterministic fixes
âœ… Vale output parsing and violation processing
âœ… Document processing pipeline with rule application
âœ… File scanning and AsciiDoc document discovery

This ensures CLAUDE.md accurately reflects the massive rule implementation
work completed yesterday, providing proper context for future development.

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>
"
