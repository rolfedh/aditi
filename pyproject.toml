[build-system]
requires = ["setuptools>=64", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "aditi"
version = "0.1.5"
description = "A CLI tool to prepare AsciiDoc files for migration to DITA"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [
    {name = "Rolfe Dlugy-Hegwer", email = "rolfedh@github.com"},
]
maintainers = [
    {name = "Rolfe Dlugy-Hegwer", email = "rolfedh@github.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Documentation",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Environment :: Console",
]
keywords = ["asciidoc", "dita", "documentation", "migration", "vale", "linter"]
dependencies = [
    "typer[all]>=0.9.0",
    "rich>=13.7.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "questionary>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pyyaml>=6.0.0",
    "mypy>=1.8.0",
    "ruff>=0.1.9",
    "black>=23.12.0",
    "pre-commit>=3.6.0",
]

[project.urls]
Homepage = "https://github.com/rolfedh/aditi"
Documentation = "https://rolfedh.github.io/aditi/"
Repository = "https://github.com/rolfedh/aditi.git"
Issues = "https://github.com/rolfedh/aditi/issues"

[project.scripts]
aditi = "aditi.cli:app"

[tool.setuptools.packages.find]
where = ["src"]
include = ["aditi*"]

[tool.setuptools.package-data]
aditi = ["vale/*.ini", "py.typed"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
strict_equality = true
ignore_missing_imports = true
plugins = ["pydantic.mypy"]

[tool.ruff]
target-version = "py311"
line-length = 88
fix = true

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # assert usage in tests

[tool.ruff.lint.isort]
known-first-party = ["aditi"]

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=aditi",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]